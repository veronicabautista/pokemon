{"version":3,"sources":["components/Filter.js","components/PokemonCard.js","components/PokemonList.js","App.js","serviceWorker.js","index.js","images/logo.png"],"names":["Filter","react_default","a","createElement","className","type","placeholder","name","this","props","onChange","searchPokemon","React","Component","PokemonCard","newPokemon","detail","src","sprites","front_default","alt","id","types","map","attack","PokemonList","_this","pokemons","sort","b","filter","search","toLocaleLowerCase","includes","pokemonName","card","key","components_PokemonCard","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","bind","assertThisInitialized","fetchPokemonList","_this2","fetch","then","response","json","data","details","results","_this3","pokemonDetail","forEach","pokemon","url","info","push","setState","event","myPoke","currentTarget","value","logo","components_Filter","components_PokemonList","href","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.e6dedd7a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Filter extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"pokedex__input\">\r\n        <input className=\"pokedex__searchbox\" type=\"text\" placeholder=\"Filtra pokemons por nombre...\" name={this.props.name} onChange={this.props.searchPokemon} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Filter;","import React from \"react\";\r\n\r\nclass PokemonCard extends React.Component {\r\n  render() {\r\n\r\n    const newPokemon = this.props.detail;\r\n\r\n    return (\r\n      <div className=\"pokemon__card\">\r\n        <div className=\"pokemon__image\">\r\n          <img className=\"pokemon__picture\" src={newPokemon.sprites.front_default} alt=\"pokemon\" />\r\n          <span className=\"pokemon__id--container\">\r\n            <p className=\"pokemon__id\">id / {newPokemon.id}</p>\r\n          </span>\r\n        </div>\r\n        <div className=\"pokemon__info\">\r\n          <p className=\"pokemon__name\">{newPokemon.name}</p>\r\n          <ul className=\"pokemon__attack--type\">{newPokemon.types.map(attack => {\r\n            return <li className=\"pokemon__attack\">{attack.type.name}</li>\r\n          })}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PokemonCard;","import React from \"react\";\r\nimport PokemonCard from \"./PokemonCard\";\r\n\r\nclass PokemonList extends React.Component {\r\n\trender() {\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"pokedex__container\">\r\n\t\t\t\t<ul className=\"pokemonlist\">\r\n\t\t\t\t\t{this.props.pokemons\r\n\t\t\t\t\t\t.sort((a, b) => a.id - b.id)\r\n\t\t\t\t\t\t.filter(search => {\r\n\t\t\t\t\t\t\treturn search.name.toLocaleLowerCase().includes(this.props.pokemonName.toLocaleLowerCase());\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.map((card => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<li className=\"pokemonlist__card\" key={card.id}>\r\n\t\t\t\t\t\t\t\t\t<PokemonCard detail={card} />\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t}))\r\n\t\t\t\t\t}\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default PokemonList;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport logo from \"./images/logo.png\";\r\nimport Filter from './components/Filter';\r\nimport PokemonList from './components/PokemonList'\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      pokemons: [],\r\n      pokemonName: \"\",\r\n    }\r\n\r\n  this.searchPokemon = this.searchPokemon.bind(this);\r\n  this.fetchPokemonList = this.fetchPokemonList.bind(this);\r\n  }\r\n\r\n  componentDidMount () {\r\n    this.fetchPokemonList()\r\n  }\r\n\r\n  fetchPokemonList (){\r\n    fetch('http://pokeapi.salestock.net/api/v2/pokemon/?limit=25' )\r\n    .then(response => {\r\n      return response.json();\r\n    })\r\n    .then(data=> {\r\n      this.details(data.results);\r\n      })\r\n  }\r\n\r\n  details(data){\r\n    let pokemonDetail=[];\r\n    data.forEach(pokemon => {\r\n      fetch(pokemon.url)\r\n      .then(response => {\r\n        return response.json();\r\n      })\r\n      .then(info => {\r\n        pokemonDetail.push(info);\r\n        this.setState({\r\n          pokemons: pokemonDetail\r\n        })\r\n      });\r\n    });\r\n  }\r\n\r\n\r\n  searchPokemon(event) {\r\n    const myPoke = event.currentTarget.value;\r\n    this.setState({\r\n      pokemonName: myPoke\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"pokedex__main\">\r\n        <div className=\"pokedex__tittle\">\r\n          <img className=\"title\" src={logo} alt=\"logo\"/>\r\n        </div>\r\n        <Filter\r\n            searchPokemon={this.searchPokemon} \r\n            pokemons={this.state.pokemons}\r\n            pokemonName={this.state.pokemonName} />\r\n        <PokemonList \r\n            pokemons={this.state.pokemons}\r\n            pokemonName={this.state.pokemonName} />\r\n        <div className=\"pokedex__footer\">\r\n          <span>\r\n            <p>Made with <a href=\"https://pokeapi.co/\">PokeApi</a>.\r\n            Pokémon and Pokémon character names are trademarks of Nintendo.</p>\r\n          </span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.799db9c7.png\";"],"sourceRoot":""}